normalize_const <- 1/integrate(post, -Inf, Inf)$value
post <- function(theta) {
normalize_const * 1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
theta_grid <- seq(-10, 25, .01)
post_grid <- post(theta_grid)
plot(theta_grid, post_grid, type='l')
problem1 <- function(gamma, n, init) {
traj <- matrix(nrow=n+1, ncol=2)
traj[1, ] <- init
accept <- matrix(0, nrow=n, ncol=2)
for (i in 1:n) {
temp_theta <- rcauchy(1, location=traj[i, 1], scale=gamma)
log_ratio <- min(0, log(post(temp_theta)) - log(post(traj[i, 1])))
log_U <- log(runif(1))
if (log_U <= log_ratio) {
traj[i+1, 1] <- temp_theta
accept[i, 1] <- 1
} else {
traj[i+1, 1] <- traj[i, 1]
}
temp_theta <- rcauchy(1, location=traj[i, 2], scale=gamma)
log_ratio <- min(0, log(post(temp_theta)) - log(post(traj[i, 2])))
log_U <- log(runif(1))
if (log_U <= log_ratio) {
traj[i+1, 2] <- temp_theta
accept[i, 2] <- 1
} else {
traj[i+1, 2] <- traj[i, 2]
}
}
plot(traj[, 1], type='l', col='red', ylim=c(-100, 100))
lines(traj[, 2], col='blue')
legend('topright', col=c('red', 'blue'), lty=c(1, 1), legend=c('Chain1', 'Chain2'))
print(paste("Chain1 acceptance rate:", mean(accept[, 1])))
print(paste("Chain2 acceptance rate:", mean(accept[, 2])))
hist(tail(traj[, 1], -.2*n), freq=F, breaks=60, main='Histogram of chain 1 draws & theoretical density', xlab='iteration')
lines(theta_grid, post_grid, lty=2, col='red')
}
problem1(1, 1e4, c(100, -100))
problem1(2, 1e4, c(100, -100))
library(extraDistr)
y_a <- c(62, 60, 63, 59)
y_b <- c(63, 67, 71, 64, 65, 66)
y_c <- c(68, 66, 71, 67, 68, 68)
y_d <- c(56, 62, 60, 61, 63, 64, 63, 59)
J <- 4
n <- c(4, 6, 6, 8)
theta <- c(mean(y_a), mean(y_b), mean(y_c), mean(y_d))
iter <- 3e3
param <- matrix(0, ncol=J+3, nrow=iter+1)
param[1, 1:J] <- c(90, -10, 90, -10)
param[1, J+1] <- mean(param[1, 1:J])
y1 <- 1.3
y2 <- 15.0
post <- function(theta) {
1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
normalize_const <- 1/integrate(post, -Inf, Inf)$value
post <- function(theta) {
normalize_const * 1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
theta_grid <- seq(-10, 25, .01)
post_grid <- post(theta_grid)
plot(theta_grid, post_grid, type='l')
problem1 <- function(gamma, n, init) {
traj <- matrix(nrow=n+1, ncol=2)
traj[1, ] <- init
accept <- matrix(0, nrow=n, ncol=2)
for (i in 1:n) {
temp_theta <- rcauchy(1, location=traj[i, 1], scale=gamma)
log_ratio <- min(0, log(post(temp_theta)) - log(post(traj[i, 1])))
log_U <- log(runif(1))
if (log_U <= log_ratio) {
traj[i+1, 1] <- temp_theta
accept[i, 1] <- 1
} else {
traj[i+1, 1] <- traj[i, 1]
}
temp_theta <- rcauchy(1, location=traj[i, 2], scale=gamma)
log_ratio <- min(0, log(post(temp_theta)) - log(post(traj[i, 2])))
log_U <- log(runif(1))
if (log_U <= log_ratio) {
traj[i+1, 2] <- temp_theta
accept[i, 2] <- 1
} else {
traj[i+1, 2] <- traj[i, 2]
}
}
plot(traj[, 1], type='l', col='red', ylim=c(-100, 100))
lines(traj[, 2], col='blue')
legend('topright', col=c('red', 'blue'), lty=c(1, 1), legend=c('Chain1', 'Chain2'))
print(paste("Chain1 acceptance rate:", mean(accept[, 1])))
print(paste("Chain2 acceptance rate:", mean(accept[, 2])))
hist(tail(traj[, 1], -.2*n), freq=F, breaks=60, main='Histogram of chain 1 draws & theoretical density', xlab='iteration')
lines(theta_grid, post_grid, lty=2, col='red')
}
problem1(1, 1e4, c(100, -100))
problem1(2, 1e4, c(100, -100))
library(extraDistr)
y_a <- c(62, 60, 63, 59)
y_b <- c(63, 67, 71, 64, 65, 66)
y_c <- c(68, 66, 71, 67, 68, 68)
y_d <- c(56, 62, 60, 61, 63, 64, 63, 59)
J <- 4
n <- c(4, 6, 6, 8)
theta <- c(mean(y_a), mean(y_b), mean(y_c), mean(y_d))
iter <- 3e3
param <- matrix(0, ncol=J+3, nrow=iter+1)
param[1, 1:J] <- c(90, -10, 90, -10)
param[1, J+1] <- mean(param[1, 1:J])
for (i in 1:iter) {
hat_sigsq <- 1/sum(n)*(sum((y_a-param[i, 1])^2) + sum((y_b-param[i, 2])^2) +     sum((y_c-param[i, 3])^2) + sum((y_d-param[i, 4])^2))
param[i+1, J+2] <- rinvchisq(1, n, hat_sigsq)
hat_tausq <- (1/(J-1))*sum((param[i, 1:J] - param[i, J+1])^2)
param[i+1, J+3] <- rinvchisq(1, J-1, hat_tausq)
hat_theta <- (1/param[i+1, J+3]*param[i, J+1] + n/param[i+1, J+2]*theta) / (1/param[i+1, J+3] + n/param[i+1, J+2])
hat_Sig <- diag(1/param[i+1, J+3] + n/param[i+1, J+2])
param[i+1, 1:J] <- MASS::mvrnorm(1, hat_theta, hat_Sig)
hat_mu <- 1/J*sum(param[i+1, 1:J])
param[i+1, J+1] <- rnorm(1, hat_mu, sqrt(param[i+1, J+3]/J))
}
par(mfrow=c(2,2))
plot(param[, 1], type='l')
plot(param[, 2], type='l', col='blue')
plot(param[, 3], type='l', col='yellow')
plot(param[, 4], type='l', col='red')
plot(param[, 5], type='l')
par(mfrow=c(2, 1))
plot(param[, 6], type='l')
plot(param[, 7], type='l')
plot(param[, 5], type='l')
par(mfrow=c(1, 2))
plot(param[, 6], type='l')
plot(param[, 7], type='l')
plot(param[, 5], type='l')
par(mfrow=c(1, 2))
plot(param[, 6], type='l', ylim=c(0, 10))
plot(param[, 7], type='l')
plot(param[, 6], type='l', ylim=c(0, 20))
sqrt(20)
median(param[, 6])
median(sqrt(param[, 6]))
plot(param[, 6], type='l', ylim=c(0, 30))
plot(sqrt(param[, 6]), type='l', ylim=c(0, 30))
plot(sqrt(param[, 6]), type='l', ylim=c(0, 10))
plot(sqrt(param[, 7]), type='l', ylim=c(0, 10))
plot(sqrt(param[, 7]), type='l', ylim=c(0, 20))
plot(sqrt(param[, 7]), type='l', ylim=c(0, 30))
par(mfrow=c(2,2))
plot(param[, 1], type='l', main='Trace for theta_1')
plot(param[, 2], type='l', main='Trace for theta_2')
plot(param[, 3], type='l', main='Trace for theta_3')
plot(param[, 4], type='l', main='Trace for theta_4')
library(extraDistr)
y_a <- c(62, 60, 63, 59)
y_b <- c(63, 67, 71, 64, 65, 66)
y_c <- c(68, 66, 71, 67, 68, 68)
y_d <- c(56, 62, 60, 61, 63, 64, 63, 59)
J <- 4
n <- c(4, 6, 6, 8)
theta <- c(mean(y_a), mean(y_b), mean(y_c), mean(y_d))
iter <- 1e2
param <- matrix(0, ncol=J+3, nrow=iter+1)
param[1, 1:J] <- c(90, -10, 90, -10)
param[1, J+1] <- mean(param[1, 1:J])
for (i in 1:iter) {
hat_sigsq <- 1/sum(n)*(sum((y_a-param[i, 1])^2) + sum((y_b-param[i, 2])^2) +     sum((y_c-param[i, 3])^2) + sum((y_d-param[i, 4])^2))
param[i+1, J+2] <- rinvchisq(1, n, hat_sigsq)
hat_tausq <- (1/(J-1))*sum((param[i, 1:J] - param[i, J+1])^2)
param[i+1, J+3] <- rinvchisq(1, J-1, hat_tausq)
hat_theta <- (1/param[i+1, J+3]*param[i, J+1] + n/param[i+1, J+2]*theta) / (1/param[i+1, J+3] + n/param[i+1, J+2])
hat_Sig <- diag(1/param[i+1, J+3] + n/param[i+1, J+2])
param[i+1, 1:J] <- MASS::mvrnorm(1, hat_theta, hat_Sig)
hat_mu <- 1/J*sum(param[i+1, 1:J])
param[i+1, J+1] <- rnorm(1, hat_mu, sqrt(param[i+1, J+3]/J))
}
par(mfrow=c(2,2))
plot(param[, 1], type='l', main='Trace for theta_1')
plot(param[, 2], type='l', main='Trace for theta_2')
plot(param[, 3], type='l', main='Trace for theta_3')
plot(param[, 4], type='l', main='Trace for theta_4')
plot(param[, 5], type='l', main='Trace for mu')
par(mfrow=c(1, 2))
plot(sqrt(param[, 6]), type='l', ylim=c(0, 10), main='Trace for sigma')
plot(sqrt(param[, 7]), type='l', ylim=c(0, 30), main='Trace for tau')
library(extraDistr)
y_a <- c(62, 60, 63, 59)
y_b <- c(63, 67, 71, 64, 65, 66)
y_c <- c(68, 66, 71, 67, 68, 68)
y_d <- c(56, 62, 60, 61, 63, 64, 63, 59)
J <- 4
n <- c(4, 6, 6, 8)
theta <- c(mean(y_a), mean(y_b), mean(y_c), mean(y_d))
iter <- 5e2
param <- matrix(0, ncol=J+3, nrow=iter+1)
param[1, 1:J] <- c(90, -10, 90, -10)
param[1, J+1] <- mean(param[1, 1:J])
y1 <- 1.3
y2 <- 15.0
post <- function(theta) {
1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
normalize_const <- 1/integrate(post, -Inf, Inf)$value
post <- function(theta) {
normalize_const * 1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
theta_grid <- seq(-10, 25, .01)
post_grid <- post(theta_grid)
plot(theta_grid, post_grid, type='l')
problem1 <- function(gamma, n, init) {
traj <- matrix(nrow=n+1, ncol=2)
traj[1, ] <- init
accept <- matrix(0, nrow=n, ncol=2)
for (i in 1:n) {
temp_theta <- rcauchy(1, location=traj[i, 1], scale=gamma)
log_ratio <- min(0, log(post(temp_theta)) - log(post(traj[i, 1])))
log_U <- log(runif(1))
if (log_U <= log_ratio) {
traj[i+1, 1] <- temp_theta
accept[i, 1] <- 1
} else {
traj[i+1, 1] <- traj[i, 1]
}
temp_theta <- rcauchy(1, location=traj[i, 2], scale=gamma)
log_ratio <- min(0, log(post(temp_theta)) - log(post(traj[i, 2])))
log_U <- log(runif(1))
if (log_U <= log_ratio) {
traj[i+1, 2] <- temp_theta
accept[i, 2] <- 1
} else {
traj[i+1, 2] <- traj[i, 2]
}
}
plot(traj[, 1], type='l', col='red', ylim=c(-100, 100))
lines(traj[, 2], col='blue')
legend('topright', col=c('red', 'blue'), lty=c(1, 1), legend=c('Chain1', 'Chain2'))
print(paste("Chain1 acceptance rate:", mean(accept[, 1])))
print(paste("Chain2 acceptance rate:", mean(accept[, 2])))
hist(tail(traj[, 1], -.2*n), freq=F, breaks=60, main='Histogram of chain 1 draws & theoretical density', xlab='iteration')
lines(theta_grid, post_grid, lty=2, col='red')
}
problem1(1, 1e4, c(100, -100))
problem1(2, 1e4, c(100, -100))
library(extraDistr)
y_a <- c(62, 60, 63, 59)
y_b <- c(63, 67, 71, 64, 65, 66)
y_c <- c(68, 66, 71, 67, 68, 68)
y_d <- c(56, 62, 60, 61, 63, 64, 63, 59)
J <- 4
n <- c(4, 6, 6, 8)
theta <- c(mean(y_a), mean(y_b), mean(y_c), mean(y_d))
iter <- 5e2
param <- matrix(0, ncol=J+3, nrow=iter+1)
param[1, 1:J] <- c(62, 63, 68, 56)
param[1, J+1] <- mean(param[1, 1:J])
y1 <- 1.3
y2 <- 15.0
post <- function(theta) {
1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
normalize_const <- 1/integrate(post, -Inf, Inf)$value
post <- function(theta) {
normalize_const * 1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
theta_grid <- seq(-10, 25, .01)
post_grid <- post(theta_grid)
plot(theta_grid, post_grid, type='l')
problem1 <- function(gamma, n, init) {
traj <- matrix(nrow=n+1, ncol=2)
traj[1, ] <- init
accept <- matrix(0, nrow=n, ncol=2)
for (i in 1:n) {
temp_theta <- rcauchy(1, location=traj[i, 1], scale=gamma)
log_ratio <- min(0, log(post(temp_theta)) - log(post(traj[i, 1])))
log_U <- log(runif(1))
if (log_U <= log_ratio) {
traj[i+1, 1] <- temp_theta
accept[i, 1] <- 1
} else {
traj[i+1, 1] <- traj[i, 1]
}
temp_theta <- rcauchy(1, location=traj[i, 2], scale=gamma)
log_ratio <- min(0, log(post(temp_theta)) - log(post(traj[i, 2])))
log_U <- log(runif(1))
if (log_U <= log_ratio) {
traj[i+1, 2] <- temp_theta
accept[i, 2] <- 1
} else {
traj[i+1, 2] <- traj[i, 2]
}
}
plot(traj[, 1], type='l', col='red', ylim=c(-100, 100))
lines(traj[, 2], col='blue')
legend('topright', col=c('red', 'blue'), lty=c(1, 1), legend=c('Chain1', 'Chain2'))
print(paste("Chain1 acceptance rate:", mean(accept[, 1])))
print(paste("Chain2 acceptance rate:", mean(accept[, 2])))
hist(tail(traj[, 1], -.2*n), freq=F, breaks=60, main='Histogram of chain 1 draws & theoretical density', xlab='iteration')
lines(theta_grid, post_grid, lty=2, col='red')
}
problem1(1, 1e4, c(100, -100))
problem1(2, 1e4, c(100, -100))
library(extraDistr)
y_a <- c(62, 60, 63, 59)
y_b <- c(63, 67, 71, 64, 65, 66)
y_c <- c(68, 66, 71, 67, 68, 68)
y_d <- c(56, 62, 60, 61, 63, 64, 63, 59)
J <- 4
n <- c(4, 6, 6, 8)
theta <- c(mean(y_a), mean(y_b), mean(y_c), mean(y_d))
iter <- 1e3
param <- matrix(0, ncol=J+3, nrow=iter+1)
param[1, 1:J] <- c(62, 63, 68, 56)
param[1, J+1] <- mean(param[1, 1:J])
for (i in 1:iter) {
hat_sigsq <- 1/sum(n)*(sum((y_a-param[i, 1])^2) + sum((y_b-param[i, 2])^2) +     sum((y_c-param[i, 3])^2) + sum((y_d-param[i, 4])^2))
param[i+1, J+2] <- rinvchisq(1, n, hat_sigsq)
hat_tausq <- (1/(J-1))*sum((param[i, 1:J] - param[i, J+1])^2)
param[i+1, J+3] <- rinvchisq(1, J-1, hat_tausq)
hat_theta <- (1/param[i+1, J+3]*param[i, J+1] + n/param[i+1, J+2]*theta) / (1/param[i+1, J+3] + n/param[i+1, J+2])
hat_Sig <- diag(1/param[i+1, J+3] + n/param[i+1, J+2])
param[i+1, 1:J] <- MASS::mvrnorm(1, hat_theta, hat_Sig)
hat_mu <- 1/J*sum(param[i+1, 1:J])
param[i+1, J+1] <- rnorm(1, hat_mu, sqrt(param[i+1, J+3]/J))
}
par(mfrow=c(2,2))
plot(param[, 1], type='l', main='Trace for theta_1')
plot(param[, 2], type='l', main='Trace for theta_2')
plot(param[, 3], type='l', main='Trace for theta_3')
plot(param[, 4], type='l', main='Trace for theta_4')
plot(param[, 5], type='l', main='Trace for mu')
par(mfrow=c(1, 2))
plot(sqrt(param[, 6]), type='l', ylim=c(0, 10), main='Trace for sigma')
plot(sqrt(param[, 7]), type='l', ylim=c(0, 30), main='Trace for tau')
plot(param[, 5], type='l', main='Trace for mu')
par(mfrow=c(1, 2))
plot(sqrt(param[-1, 6]), type='l', ylim=c(0, 10), main='Trace for sigma')
plot(sqrt(param[-1, 7]), type='l', ylim=c(0, 30), main='Trace for tau')
apply(param, 1, quantile)
apply(param, 2, quantile)
param <- tail(param, floor(.5*iter))
param <- tail(param, floor(.8*iter))
apply(param, 2, quantile)
apply(param, 2, quantile, c(.025, .25, .5, .75, .975))
param <- tail(param, floor(.8*iter))
param[, 6] <- sqrt(param[, 6])
param[, 7] <- sqrt(param[, 7])
apply(param, 2, quantile, c(.025, .25, .5, .75, .975))
t(apply(param, 2, quantile, c(.025, .25, .5, .75, .975)))
rownames(res)
param <- tail(param, floor(.8*iter))
param[, 6] <- sqrt(param[, 6])
param[, 7] <- sqrt(param[, 7])
res <- t(apply(param, 2, quantile, c(.025, .25, .5, .75, .975)))
rownames(res)
param <- tail(param, floor(.8*iter))
param[, 6] <- sqrt(param[, 6])
param[, 7] <- sqrt(param[, 7])
res <- t(apply(param, 2, quantile, c(.025, .25, .5, .75, .975)))
rownames(res) <- c('theta_1', 'theta_2', 'theta_3', 'theta_4',
'mu', 'sigma', 'tau')
res
y1 <- 1.3
y2 <- 15.0
post <- function(theta) {
1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
normalize_const <- 1/integrate(post, -Inf, Inf)$value
post <- function(theta) {
normalize_const * 1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
theta_grid <- seq(-10, 25, .01)
post_grid <- post(theta_grid)
plot(theta_grid, post_grid, type='l')
problem1 <- function(gamma, n, init) {
traj <- matrix(nrow=n+1, ncol=2)
traj[1, ] <- init
accept <- matrix(0, nrow=n, ncol=2)
for (i in 1:n) {
temp_theta <- rcauchy(1, location=traj[i, 1], scale=gamma)
log_ratio <- min(0, log(post(temp_theta)) - log(post(traj[i, 1])))
log_U <- log(runif(1))
if (log_U <= log_ratio) {
traj[i+1, 1] <- temp_theta
accept[i, 1] <- 1
} else {
traj[i+1, 1] <- traj[i, 1]
}
temp_theta <- rcauchy(1, location=traj[i, 2], scale=gamma)
log_ratio <- min(0, log(post(temp_theta)) - log(post(traj[i, 2])))
log_U <- log(runif(1))
if (log_U <= log_ratio) {
traj[i+1, 2] <- temp_theta
accept[i, 2] <- 1
} else {
traj[i+1, 2] <- traj[i, 2]
}
}
plot(traj[, 1], type='l', col='red', ylim=c(-100, 100))
lines(traj[, 2], col='blue')
legend('topright', col=c('red', 'blue'), lty=c(1, 1), legend=c('Chain1', 'Chain2'))
print(paste("Chain1 acceptance rate:", mean(accept[, 1])))
print(paste("Chain2 acceptance rate:", mean(accept[, 2])))
hist(tail(traj[, 1], -.2*n), freq=F, breaks=60, main='Histogram of chain 1 draws & theoretical density', xlab='iteration')
lines(theta_grid, post_grid, lty=2, col='red')
}
problem1(1, 1e4, c(100, -100))
problem1(2, 1e4, c(100, -100))
library(extraDistr)
y_a <- c(62, 60, 63, 59)
y_b <- c(63, 67, 71, 64, 65, 66)
y_c <- c(68, 66, 71, 67, 68, 68)
y_d <- c(56, 62, 60, 61, 63, 64, 63, 59)
J <- 4
n <- c(4, 6, 6, 8)
theta <- c(mean(y_a), mean(y_b), mean(y_c), mean(y_d))
iter <- 1e3
param <- matrix(0, ncol=J+3, nrow=iter+1)
param[1, 1:J] <- c(62, 63, 68, 56)
param[1, J+1] <- mean(param[1, 1:J])
for (i in 1:iter) {
hat_sigsq <- 1/sum(n)*(sum((y_a-param[i, 1])^2) + sum((y_b-param[i, 2])^2) +     sum((y_c-param[i, 3])^2) + sum((y_d-param[i, 4])^2))
param[i+1, J+2] <- rinvchisq(1, n, hat_sigsq)
hat_tausq <- (1/(J-1))*sum((param[i, 1:J] - param[i, J+1])^2)
param[i+1, J+3] <- rinvchisq(1, J-1, hat_tausq)
hat_theta <- (1/param[i+1, J+3]*param[i, J+1] + n/param[i+1, J+2]*theta) / (1/param[i+1, J+3] + n/param[i+1, J+2])
hat_Sig <- diag(1/param[i+1, J+3] + n/param[i+1, J+2])
param[i+1, 1:J] <- MASS::mvrnorm(1, hat_theta, hat_Sig)
hat_mu <- 1/J*sum(param[i+1, 1:J])
param[i+1, J+1] <- rnorm(1, hat_mu, sqrt(param[i+1, J+3]/J))
}
par(mfrow=c(2,2))
plot(param[, 1], type='l', main='Trace for theta_1')
plot(param[, 2], type='l', main='Trace for theta_2')
plot(param[, 3], type='l', main='Trace for theta_3')
plot(param[, 4], type='l', main='Trace for theta_4')
plot(param[, 5], type='l', main='Trace for mu')
par(mfrow=c(1, 2))
plot(sqrt(param[-1, 6]), type='l', ylim=c(0, 10), main='Trace for sigma')
plot(sqrt(param[-1, 7]), type='l', ylim=c(0, 30), main='Trace for tau')
param <- tail(param, floor(.8*iter))
param[, 6] <- sqrt(param[, 6])
param[, 7] <- sqrt(param[, 7])
res <- t(apply(param, 2, quantile, c(.025, .25, .5, .75, .975)))
rownames(res) <- c('theta_1', 'theta_2', 'theta_3', 'theta_4',
'mu', 'sigma', 'tau')
res
set.seed(1)
y1 <- 1.3
y2 <- 1
post <- function(theta) {
1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
normalize_const <- 1/integrate(post, -Inf, Inf)$value
post <- function(theta) {
normalize_const * 1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
theta_grid <- seq(-10, 25, .01)
post_grid <- post(theta_grid)
plot(theta_grid, post_grid, type='l')
set.seed(1)
y1 <- 1.3
y2 <- 2.3
post <- function(theta) {
1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
normalize_const <- 1/integrate(post, -Inf, Inf)$value
post <- function(theta) {
normalize_const * 1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
theta_grid <- seq(-10, 25, .01)
post_grid <- post(theta_grid)
plot(theta_grid, post_grid, type='l')
set.seed(1)
y1 <- 1.3
y2 <- 2.31
post <- function(theta) {
1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
normalize_const <- 1/integrate(post, -Inf, Inf)$value
post <- function(theta) {
normalize_const * 1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
theta_grid <- seq(-10, 25, .01)
post_grid <- post(theta_grid)
plot(theta_grid, post_grid, type='l')
set.seed(1)
y1 <- 1.3
y2 <- 2.56
post <- function(theta) {
1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
normalize_const <- 1/integrate(post, -Inf, Inf)$value
post <- function(theta) {
normalize_const * 1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
theta_grid <- seq(-10, 25, .01)
post_grid <- post(theta_grid)
plot(theta_grid, post_grid, type='l')
set.seed(1)
y1 <- 1.3
y2 <- 3.3
post <- function(theta) {
1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
normalize_const <- 1/integrate(post, -Inf, Inf)$value
post <- function(theta) {
normalize_const * 1/pi^2/(1+(y1-theta)^2)/(1+(y2-theta)^2)
}
theta_grid <- seq(-10, 25, .01)
post_grid <- post(theta_grid)
plot(theta_grid, post_grid, type='l')
